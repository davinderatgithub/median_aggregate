CREATE TABLE intvals(val int, color text);
-- Test empty table
SELECT median(val) FROM intvals;
 median 
--------
       
(1 row)

-- Integers with odd number of values
INSERT INTO intvals VALUES
       (1, 'a'),
       (2, 'c'),
       (9, 'b'),
       (7, 'c'),
       (2, 'd'),
       (-3, 'd'),
       (2, 'e');
SELECT * FROM intvals ORDER BY val;
 val | color 
-----+-------
  -3 | d
   1 | a
   2 | c
   2 | e
   2 | d
   7 | c
   9 | b
(7 rows)

SELECT median(val) FROM intvals;
 median 
--------
      2
(1 row)

-- Integers with NULLs and even number of values
INSERT INTO intvals VALUES
       (99, 'a'),
       (NULL, 'a'),
       (NULL, 'e'),
       (NULL, 'b'),
       (7, 'c'),
       (0, 'd');
SELECT * FROM intvals ORDER BY val;
 val | color 
-----+-------
  -3 | d
   0 | d
   1 | a
   2 | e
   2 | d
   2 | c
   7 | c
   7 | c
   9 | b
  99 | a
     | a
     | e
     | b
(13 rows)

SELECT median(val) FROM intvals;
 median 
--------
      2
(1 row)

-- Text values
CREATE TABLE textvals(val text, color int);
INSERT INTO textvals VALUES
       ('erik', 1),
       ('mat', 3),
       ('rob', 8),
       ('david', 9),
       ('lee', 2);
SELECT * FROM textvals ORDER BY val;
  val  | color 
-------+-------
 david |     9
 erik  |     1
 lee   |     2
 mat   |     3
 rob   |     8
(5 rows)

SELECT median(val) FROM textvals;
 median 
--------
 lee
(1 row)

-- Test large table with timestamps
CREATE TABLE timestampvals (val timestamptz);
INSERT INTO timestampvals(val)
SELECT TIMESTAMP 'epoch' + (i * INTERVAL '1 second')
FROM generate_series(0, 100000) as T(i);
SELECT median(val) FROM timestampvals;
            median            
------------------------------
 Thu Jan 01 13:53:20 1970 PST
(1 row)

-- varchar, even number of records
CREATE TABLE varchar_data (value VARCHAR(255));
INSERT INTO varchar_data (value) VALUES ('date'), ('banana'), ('apple'), ('cherry');
SELECT * from varchar_data ORDER BY value;
 value  
--------
 apple
 banana
 cherry
 date
(4 rows)

SELECT median(value) AS median_value FROM varchar_data;
 median_value 
--------------
 banana
(1 row)

-- Window function test
CREATE TABLE sales (
    id SERIAL PRIMARY KEY,
    product_id INT,
    amount INT
);
INSERT INTO sales (product_id, amount) VALUES
(1, 100),
(1, 200),
(1, 150),
(2, 300),
(2, 350),
(2, 400),
(3, 250),
(3, 300),
(3, 350);
select * from sales;
 id | product_id | amount 
----+------------+--------
  1 |          1 |    100
  2 |          1 |    200
  3 |          1 |    150
  4 |          2 |    300
  5 |          2 |    350
  6 |          2 |    400
  7 |          3 |    250
  8 |          3 |    300
  9 |          3 |    350
(9 rows)

--median sales amount for each product
SELECT
    id,
    product_id,
    amount,
    median(amount) OVER (PARTITION BY product_id) AS median_amount
FROM
    sales;
 id | product_id | amount | median_amount 
----+------------+--------+---------------
  1 |          1 |    100 |           150
  2 |          1 |    200 |           150
  3 |          1 |    150 |           150
  4 |          2 |    300 |           350
  5 |          2 |    350 |           350
  6 |          2 |    400 |           350
  7 |          3 |    250 |           300
  8 |          3 |    300 |           300
  9 |          3 |    350 |           300
(9 rows)

--calculate running median
SELECT
    id,
    product_id,
    amount,
    median(amount) OVER (PARTITION BY product_id ORDER BY id) AS running_median_amount
FROM
    sales;
 id | product_id | amount | running_median_amount 
----+------------+--------+-----------------------
  1 |          1 |    100 |                   100
  2 |          1 |    200 |                   150
  3 |          1 |    150 |                   150
  4 |          2 |    300 |                   300
  5 |          2 |    350 |                   325
  6 |          2 |    400 |                   350
  7 |          3 |    250 |                   250
  8 |          3 |    300 |                   275
  9 |          3 |    350 |                   300
(9 rows)

-- Test aggregate with all NULL values
-- Create a test table
CREATE TEMP TABLE test_median (
    id SERIAL PRIMARY KEY,
    value NUMERIC
);
-- Insert some test data, including NULLs
INSERT INTO test_median (value) VALUES
    (10),
    (20),
    (30),
    (NULL),
    (40),
    (NULL),
    (50);
-- Test aggregate with all NULL values
SELECT median(value) AS median_value FROM test_median WHERE value IS NULL;
 median_value 
--------------
             
(1 row)

